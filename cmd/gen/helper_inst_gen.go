package main

import (
	"io"
	"net/http"
	"os"
	"path"
	"regexp"
	"strconv"
	"strings"
	"text/template"

	"github.com/cilium/ebpf/asm"
)

const defUrl = "https://raw.githubusercontent.com/libbpf/libbpf/9c44c8a8e01cf86bc801c3b72324358d5ea99e50/src/bpf_helper_defs.h"

func main() {
	tmpDir := os.TempDir()
	cacheDir := path.Join(tmpDir, "edb-cache")
	cacheFile := path.Join(tmpDir, "edb-cache", "bpf_helper_defs.h")

	f, err := os.Open(cacheFile)
	if err != nil {
		err = os.MkdirAll(cacheDir, 0775)
		if err != nil {
			panic(err)
		}

		f, err = os.Create(cacheFile)
		if err != nil {
			panic(err)
		}

		resp, err := http.Get(defUrl)
		if err != nil {
			panic(err)
		}

		_, err = io.Copy(f, resp.Body)
		if err != nil {
			panic(err)
		}

		_, err = f.Seek(0, 0)
		if err != nil {
			panic(err)
		}
	}
	defer f.Close()

	contents, err := io.ReadAll(f)
	if err != nil {
		panic(err)
	}

	parsedFuncs := make([]parsedFunc, 0)

	for _, match := range fnRegexp.FindAllSubmatch(contents, -1) {
		parsedFunc := parsedFunc{
			RetType: strings.TrimSpace(string(match[1])),
		}

		num, err := strconv.Atoi(string(match[3]))
		if err != nil {
			panic(err)
		}
		parsedFunc.FnNum = asm.BuiltinFunc(num)

		for _, param := range strings.Split(string(match[2]), ", ") {
			name := paramRegexp.FindString(param)
			typ := strings.TrimSuffix(param, name)

			// Edge case, used to indicate there are no params
			if typ == "" && name == "void" {
				continue
			}

			parsedFunc.Params = append(parsedFunc.Params, parsedParam{
				Typ:  strings.TrimSpace(typ),
				Name: name,
			})
		}

		parsedFuncs = append(parsedFuncs, parsedFunc)
	}

	tpl, err := template.New("tpl").Parse(goTpl)
	if err != nil {
		panic(err)
	}

	err = tpl.Execute(os.Stdout, parsedFuncs)
	if err != nil {
		panic(err)
	}
}

var (
	fnRegexp    = regexp.MustCompile(`static (.+)\(\*[a-zA-Z0-9_]+\)\(([^;\n]*)\) = \(void \*\) ([0-9]+);\n`)
	paramRegexp = regexp.MustCompile(`([a-zA-Z0-9_]+)$`)
)

type parsedFunc struct {
	RetType string
	Params  []parsedParam
	FnNum   asm.BuiltinFunc
}

type parsedParam struct {
	Typ  string
	Name string
}

var goTpl = `package capctx

import "github.com/cilium/ebpf/asm"

// Code generated by 'go run cmd/gen/helper_inst_gen.go | gofmt > cmd/capctx/helper_inst_gen.go' DO NOT EDIT

type helperFunc struct {
	retType string
	params  []helperParam
}

type helperParam struct {
	typ  string
	name string
}

var helpers = map[asm.BuiltinFunc]helperFunc{ {{ range . }}
asm.{{.FnNum}}: {
	retType: "{{.RetType}}",
	params: []helperParam{
		{{ range .Params }}{typ: "{{.Typ}}", name: "{{.Name}}"},
		{{end}}
    },
},{{end}}
}
`
